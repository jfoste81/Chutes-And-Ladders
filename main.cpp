#include <iostream>
#include <vector>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <ostream>
#include <string>
#include <ios> 
#include <limits>

using namespace std;

// function declarations 

int spin();
void move(string board[5][8], int spin, vector<int>& coords, vector<string> users, int count);
void displayBoard(string board[5][8]);
bool checkForLadders(string board[5][8], vector<int>& coords, int count);
bool checkForChutes(string board[5][8], vector<int>& coords, int count);
bool checkForWinner(string board[5][8]);

//Main
int main(){
    srand(time(NULL)); //seeding rand()
    
    //variable declarations
    vector<string> users;
    vector<string> pieces = {"a","b","c","d"};
    vector<int> coords;
    int userVal;
    int userWinner; 
    string input = "";
    bool run = true;
    int x;
    int y; 
    int spinAmount;
    string board[5][8] = { {" ", " ", " ", " ", " ", " ", " ", " "},
                         {" ", " ", " ", " ", " ", " ", " ", " "},
                         {" ", " ", " ", " ", " ", " ", " ", " "},
                         {" ", " ", " ", " ", " ", " ", " ", " "},
                         {" ", " ", " ", " ", " ", " ", " ", " "} };
                         
    //Introduction statements
    cout << "Welcome to Chutes and Ladders!" << endl;
    cout << "How many users will be playing the game?" << endl;
    cin >> input;
    userVal = atoi(input.c_str());
    while(userVal < 2 || userVal > 4) { // Ask user for an amount of players and check that its valid
        cout << "The game can only support 2-4 players. Please enter another value:" << endl;
        cin >> input;
        userVal = atoi(input.c_str());
    }
    
    // For loop that adds in the amount of pieces based on the amount of players and initializing coordinates for each user to [4][0]
    for(int i = 0; i < userVal; i++){
        users.push_back(pieces.at(i));
        coords.push_back(4);
        coords.push_back(0);
    }
    
    // For loop that initializes each user's piece to [4][0] on the board
    for(int i = 0; i < users.size(); i++){
        board[coords.at(i * 2)][coords.at(i * 2 + 1)] += users.at(i);
    }
    displayBoard(board);
    //Start of the actual game
    while(run){
        for(int i = 0; i < users.size(); i++){
            string choice = "";
            cout << "\nPlayer " << i+1 << " are you ready? Press any button to continue:" << endl; //User input
            cin >> choice; 
            cout << "spin()" << endl;
            spinAmount = spin(); 
            cout << "\nPlayer " << i+1 << " spun a " << endl;
            //for loop that simulates dice rolling
            for(int j = 0; j < (rand() % 200000) + 100000; j++){ 
                cout << "\r" << (rand() % 6) + 1 << flush;
            }
            cout << "\r" << spinAmount << "!" << endl;
            sleep(2);
            cout << "move()" << endl;
            move(board, spinAmount, coords, users, i);
            cout << "displayboard()" << endl;
            displayBoard(board);
            sleep(3);
            if(checkForLadders(board, coords, i)){
                cout << "\nPlayer " << i+1 << " climbed up a ladder!" << endl;
                sleep(2);
                displayBoard(board);
                sleep(2);
            } else if(checkForChutes(board, coords, i)){
                cout << "\nPlayer " << i+1 << " fell down a chute!" << endl;
                sleep(2);
                displayBoard(board);
                sleep(2);
            }
            if(checkForWinner(board)){
                run = false;
                userWinner = i;
                break;
            }
        }
    }
    
    cout << "\n*** Congratulations Player " << userWinner+1 << " you have won the game! ***" << endl; //End of game statement!
    
    return 0;
}

// Function that returns a randomly generated integer
int spin(){
    int roll = (rand() % 6) + 1;
    
    return roll;
}

 // Function that moves the pieces on the board based on the integer spinAmount generated by the spin function.
void move(string board[5][8], int spinAmount, vector<int>& coords, vector<string> users, int count){ 
    int y = coords.at(count * 2);
    int x = coords.at(count * 2 + 1);
    if(y == 0 && x + spinAmount > 7 && x > 0){
        board[y][x-1] = users.at(count);
        board[y][x] = board[y][x].erase(board[y][x].find(users.at(count)),1);
        return;
    } else if(y == 0 && x + spinAmount > 7 && x == 0){
        board[y-1][x] = users.at(count);
        board[y][x] = board[y][x].erase(board[y][x].find(users.at(count)),1);
        return;
    } else if(y == 0 && x + spinAmount == 7){
        board[0][7] = users.at(count);
        board[y][x] = board[y][x].erase(board[y][x].find(users.at(count)),1);
        return;
    }
    for(int i = 0; i < spinAmount; i++){
        if(((coords.at(count * 2) % 2 == 0) && coords.at(count * 2 + 1) + 1 > 7) || (coords.at(count * 2) % 2 == 1 && coords.at(count * 2 + 1) - 1 < 0)){
            coords.at(count * 2)--;
        } else{
            if(coords.at(count * 2) % 2 == 0){
                coords.at(count * 2 + 1) = coords.at(count * 2 + 1) + 1;
            } else{
                coords.at(count * 2 + 1) = coords.at(count * 2 + 1) - 1;
            }
        }
    }
    board[coords.at(count * 2)][coords.at(count * 2 + 1)] += users.at(count); //if-else chain to check see if space is empty (for spaces)
    board[y][x] = board[y][x].erase(board[y][x].find(users.at(count)),1);
}

//Function that prints out the board, with all of the chutes and ladders included!
void displayBoard(string board[5][8]){
    //puts a space inside of empty indices
    for(int i = 0; i < 5; i++){
        for(int j = 0; j < 8; j++){
            if(board[i][j] != " " && (board[i][j].find("a") != string::npos || board[i][j].find("b") != string::npos || board[i][j].find("c") != string::npos || board[i][j].find("d") != string::npos)){ // change to doesnt contain a,b,c,d
                board[i][j] = " ";
            }
        }
    }
    // double for loop 
    // inside nested for loop have two if statements (check for first and last) to draw walls '|''
    for(int i = 0; i < 5; i++){
        // If-Else-If chains to print out the chutes and ladders in the rows
        if(i == 1){
            cout << "----------------------#----------" << endl;
        } else if (i == 4){
            cout << "--------------#------------------" << endl;
        } else{
            cout << "---------------------------------" << endl;
        }
        for(int j = 0; j < 8; j++){
            if(j == 0){
                cout << "| ";
            }
            // If-Else-If chains to print out the chutes and ladders in the columns
            if(i == 4 && j == 6){
                cout << board[4][6] << " \\ ";
            } else if(i == 3 && j ==1){
                cout << board[3][1] << " / ";
            } else if(i == 3 && j == 0){
                cout << board[3][0] << " # "; 
            } else if(i == 3 && j == 3){
                cout << board[3][3] << " # ";
            } else if(i == 3 && j == 4){
                cout << board[3][4] << " \\ ";
            } else if(i == 2 && j == 0){
                cout << board[2][0] << " / ";
            } else if(i == 2 && j == 4){
                cout << board[2][4] << " \\ ";
            } else if(i == 2 && j == 5){
                cout << board[2][5] << " / ";
            } else if(i == 2 && j == 6){
                cout << board[2][6] << " # ";
            } else if(i == 1 && j == 0){
                cout << board[1][0] << " / ";
            } else if(i == 1 && j == 2){
                cout << board[1][2] << " # ";
            } else if(i == 1 && j == 5){
                cout << board[1][5] << " / ";
            } else{
                cout << board[i][j] << " | ";
            }
        }
        cout << endl;
    }
    cout << "---------------------------------" << endl;
}

// Function that checks the chutes of the board to see if users are occupying those spaces
// If so, function moves them to appropriate index
bool checkForChutes(string board[5][8], vector<int>& coords, int count){
    if (board[3][6] != " "){
        if(board[4][7] != " "){
            board[4][7] += board[3][6];
        } else{
            board[4][7] = board[3][6];
        }
        board[3][6] = " ";
        coords.at(count * 2) = 4;
        coords.at(count * 2 + 1) = 7;
        return true;
    }else if (board[2][2] != " "){
        if(board[3][1] != " "){
            board[3][1] += board[2][2];
        } else{
            board[3][1] = board[2][2];
        }
        board[2][2] = " ";
        coords.at(count * 2) = 3;
        coords.at(count * 2 + 1) = 1;
        return true;
    }else if (board[1][4] != " "){
        if(board[3][5] != " "){
            board[3][5] += board[1][4];
        } else{
            board[3][5] = board[1][4];
        }
        board[1][4] = " ";
        coords.at(count * 2) = 3;
        coords.at(count * 2 + 1) = 5;
        return true;
    }else if (board[0][1] != " "){
        if(board[2][0] != " "){
            board[2][0] += board[0][1];
        } else{
            board[2][0] = board[0][1];
        }
        board[0][1] = " ";
        coords.at(count * 2) = 2;
        coords.at(count * 2 + 1) = 0;
        return true;
    }else if (board[0][6] != " "){
        if(board[2][5] != " "){
            board[2][5] += board[0][6];
        } else{
            board[2][5] = board[0][6];
        }
        board[0][6] = " ";
        coords.at(count * 2) = 2;
        coords.at(count * 2 + 1) = 5;
        return true;
    }
    return false;
}

// Function that checks the ladders of the board to see if users are occupying those spaces
// If so, function moves them to appropriate index
bool checkForLadders(string board[5][8], vector<int>& coords, int count){
    if (board[4][3] != " "){
        if(board[3][3] != " "){
            board[3][3] += board[4][3];
        } else{
            board[3][3] = board[4][3];
        }
        board[4][3] = " ";
        coords.at(count * 2) = 3;
        coords.at(count * 2 + 1) = 3;
        return true;
    } else if (board[3][4] != " "){
        if (board[2][3] != " "){
            board[2][3] += board[3][4];
        } else{
            board[2][3] = board[3][4];
        }
        board[3][4] = " ";
        coords.at(count * 2) = 2;
        coords.at(count * 2 + 1) = 3;
        return true;
    } else if (board[3][0] != " "){
        if (board[2][1] != " "){
            board[2][1] += board[3][0];
        } else{
            board[2][1] = board[3][0];
        }
        board[3][0] = " ";
        coords.at(count * 2) = 2;
        coords.at(count * 2 + 1) = 1;
        return true;
    } else if (board[2][6] != " "){
        if (board[1][7] != " "){
            board[1][7] += board[2][6];
        } else{
            board[1][7] = board[2][6];
        }
        board[2][6] = " ";
        coords.at(count * 2) = 1;
        coords.at(count * 2 + 1) = 7;
        return true;
    } else if (board[1][5] != " "){
        if (board[0][5] != " "){
            board[0][5] += board[1][5];
        } else{
            board[0][5] = board[1][5];
        }
        board[1][5] = " ";
        coords.at(count * 2) = 0;
        coords.at(count * 2 + 1) = 5;
        return true;
    } else if (board[1][3] != " "){
        if (board[0][2] != " "){
            board[0][2] += board[1][3];
        } else{
            board[0][2] = board[1][3];
        }
        board[1][3] = " ";
        coords.at(count * 2) = 0;
        coords.at(count * 2 + 1) = 2;
        return true;
    }
    return false;
}

// Function that checks the winners square to see if anyone has won yet
bool checkForWinner(string board[5][8]){
    // Check for position 40
    if(board[0][7] != " "){ 
        return true;
    } 
    else{
        return false;
    }
}